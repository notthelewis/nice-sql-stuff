# It has came to light that stored sql procedures are a more efficient way of handling scripted sql. 

https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-callproc.html
https://codingsight.com/dynamic-sql-vs-stored-procedure/
https://www.mysqltutorial.org/stored-procedures-parameters.aspx
https://blog.sqlauthority.com/2019/10/14/mysql-mariadb-writing-the-very-first-stored-procedure/

# In lieu of this, I'm gonna re work the logic for the nds tool... 
# This is going to COMPLETELY restructure the 2queryMagic.py file. 

#  I originally used a for loop in python to match the IPs with domain names

```
  ips_low_latency, hosts_low, lat_low = [], [], []

  for i,x,y in ip_ll:
      cursorA.execute("SELECT domain FROM pytest.nodes2 WHERE ip = '" + str(i) + "'")
      hosts_low.append(cursorA.fetchone())
      ips_low_latency.append(i)
      lat_low.append(x)

  return zip(ips_low_latency, hosts_low, lat_low)
```


# This is going to be completely restructured using:
```
CREATE PROCEDURE domSel(IN xip VARCHAR(16)) SELECT domain FROM pytest.nodes2 WHERE ip = xip
```

This will allow me to use syntax similar to:

```
result_args = cursor.callproc(proc_name, args=())
```
-----------------------------
UPDATE
-----------------------------


Working Python call to stored procedure: 

result_arg = cursorA.callproc('domSel', args=('194.36.110.199', '@dom'))
for result in cursorA.stored_results():
	print(result.fetchall())

